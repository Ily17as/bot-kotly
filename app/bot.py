import asyncio
import logging

from aiogram import Bot, Dispatcher, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message

from app.config import BOT_TOKEN, MASTER_BOT_TOKEN
from app.database.database import init_db
from app.database.models import add_user, list_users
from app.handlers.client_requests import router as client_router
from app.handlers.master import router as master_router
from app.middlewares.error_handler import ErrorHandlerMiddleware
from app.utils.logger import setup_logger
from aiogram.client.bot import DefaultBotProperties

from app.handlers.client_confirm import router as confirm_router
from app.handlers import client_review

# ‚Äî –æ–±—â–∏–π –ª–æ–≥–≥–µ—Ä
setup_logger()
logger = logging.getLogger(__name__)

# === –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç ===
user_bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
user_dp = Dispatcher()
user_dp.include_router(client_router)
user_dp.message.middleware(ErrorHandlerMiddleware())
user_dp.include_router(confirm_router)

# === –ú–∞—Å—Ç–µ—Ä-–±–æ—Ç ===
master_bot = Bot(token=MASTER_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
master_dp = Dispatcher()
master_dp.include_router(master_router)
master_dp.message.middleware(ErrorHandlerMiddleware())

from app.handlers import client_review
user_dp.include_router(client_review.router)

# –≠–∫—Å–ø–æ—Ä—Ç, —á—Ç–æ–±—ã client_requests.py –º–æ–≥ —à–ª–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞–º
__all__ = ["user_bot", "master_bot"]

# /start –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
main_router = Router()
main_router.message.filter(Command("start"))

# –ö–æ–º–∞–Ω–¥–∞ /start
@main_router.message(Command("start"))
async def start_handler(message: Message):
    await add_user(message.from_user.id, message.from_user.username or "")

    # –ö–Ω–æ–ø–∫–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")],
            [KeyboardButton(text="üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞—è–≤–æ–∫ <b>–ö–æ—Ç—ë–ª–û–ö</b>!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–ª–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–æ—Ç–ª–æ–≤.\n\n"
        "üõ† <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
        "- üìã –û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É\n"
        "- üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏\n\n"
        "üí¨ <b>–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É:</b>\n"
        "1. –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ—Ç–ª–æ–º.\n"
        "2. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ).\n"
        "3. –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ (–∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é).\n\n"
        "‚ùó –ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:\n"
        "- –ó–∞—è–≤–∫–∞ –ø–æ–ø–∞–¥—ë—Ç –≤ –æ—á–µ—Ä–µ–¥—å.\n"
        "- –ü–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –º–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ —á–µ—Ä–µ–∑ Telegram.\n"
        "- üí¨ <b>–û–ø–ª–∞—Ç–∞ –∏ –¥–µ—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç—ã</b> –æ–±–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —Å –º–∞—Å—Ç–µ—Ä–æ–º.\n"
        "- –°–µ—Ä–≤–∏—Å <b>–Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏</b> –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç ‚Äî –º—ã —Ç–æ–ª—å–∫–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä.\n\n"
        "‚è≥ –ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–º–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞, –∞ –¥–µ–Ω—å–≥–∏ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä–Ω—É—Ç—Å—è.\n\n"
        "‚úÖ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\" –Ω–∏–∂–µ!",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


user_dp.include_router(main_router)

# –û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def debug_users():
    users = await list_users()
    for u in users:
        print(f"ID: {u[0]}, Username: {u[1]}")

# –ó–∞–ø—É—Å–∫ –æ–±–æ–∏—Ö –±–æ—Ç–æ–≤
async def main():
    await init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞; –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –±–æ—Ç–∞")
    await asyncio.gather(
        user_dp.start_polling(user_bot, drop_pending_updates=True),
        master_dp.start_polling(master_bot, drop_pending_updates=True),
    )

if __name__ == "__main__":
    asyncio.run(main())
