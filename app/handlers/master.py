from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import logging
from app.database.models import (
    add_master,
    list_available_masters,
    take_request,
    decline_request,
    complete_request,
    pay_commission,
    list_master_requests,
    get_master_by_id,
    get_request_by_id,
    list_admins,
    is_admin,
)
from app.bots import user_bot
from app.handlers.client_review import make_rating_kb
from aiogram.types import BufferedInputFile
from io import BytesIO
router = Router()

# –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
MASTER_MENU = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é")],
        [KeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É")],
    ],
    resize_keyboard=True,
)


def make_master_menu(is_admin: bool) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞, –¥–æ–±–∞–≤–ª—è—è –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    keyboard = [
        [KeyboardButton(text="üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é")],
        [KeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É")],
    ]
    if is_admin:
        keyboard.extend([
            [KeyboardButton(text="üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞")],
            [KeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞")],
            [KeyboardButton(text="üìù –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫")],
        ])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def make_master_menu(is_admin: bool) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞, –¥–æ–±–∞–≤–ª—è—è –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    keyboard = [
        [KeyboardButton(text="üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é")],
        [KeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É")],
    ]
    if is_admin:
        keyboard.extend([
            [KeyboardButton(text="üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞")],
            [KeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞")],
            [KeyboardButton(text="üìù –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫")],
        ])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def make_master_menu(is_admin: bool) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞, –¥–æ–±–∞–≤–ª—è—è –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    keyboard = [
        [KeyboardButton(text="üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é")],
        [KeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É")],
    ]
    if is_admin:
        keyboard.extend([
            [KeyboardButton(text="üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞")],
            [KeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞")],
            [KeyboardButton(text="üìù –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫")],
        ])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


class MasterRegistration(StatesGroup):
    full_name = State()
    phone = State()


class CloseRequestFSM(StatesGroup):
    request_id = State()


# ‚Äî /start –∏ /help
@router.message(Command("start"))
async def master_start(message: Message):
    admin = await is_admin(message.from_user.id)
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–∞—Å—Ç–µ—Ä–∞!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/register_master ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏\n"
        "/finish_request [id] ‚Äî –∑–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É –ø–æ –Ω–æ–º–µ—Ä—É\n"
        "/my_requests ‚Äî –º–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        reply_markup=MASTER_MENU,
    )
    if admin:
        text += (
            "\n\n–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/all_requests [N] ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞—è–≤–æ–∫\n"
            "/block_master [telegram_id] ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞\n"
            "/unblock_master [telegram_id] ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞\n"
            "/close_request [id] ‚Äî –∑–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ\n"
            "/recent_reviews ‚Äî –∏—Å—Ç–æ—Ä–∏—è 10 –∑–∞—è–≤–æ–∫ —Å –æ—Ç–∑—ã–≤–∞–º–∏\n"
            "/logout_admin ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )

    await message.answer(text, reply_markup=make_master_menu(admin))


@router.message(Command("help"))
async def master_help(message: Message):
    await master_start(message)


# ‚Äî –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(Command("register_master"))
async def cmd_register_master(message: Message, state: FSMContext):
    await state.set_state(MasterRegistration.full_name)
    await message.answer("üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")


@router.message(StateFilter(MasterRegistration.full_name), F.text)
async def process_master_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text.strip())
    await state.set_state(MasterRegistration.phone)
    await message.answer("üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890:")


@router.message(StateFilter(MasterRegistration.phone), F.text)
async def process_master_phone(message: Message, state: FSMContext):
    data = await state.get_data()
    full_name = data["full_name"]
    phone = message.text.strip()
    user = message.from_user
    username = user.username or ""

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await add_master(user.id, username, full_name, phone)

    is_admin_user = await is_admin(user.id)
    await message.answer(
        "‚úÖ –ú–∞—Å—Ç–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üë§ –ò–º—è: {full_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏.\n"
        "–î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /finish_request",
        reply_markup=make_master_menu(is_admin_user),
    )
    await state.clear()


# inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
def make_request_kb(request_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîß –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take:{request_id}")
    ]])

def make_done_kb(request_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"done:{request_id}"
                ),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline:{request_id}")
            ]
        ]
    )
def make_client_confirm_kb(request_id: int) -> InlineKeyboardMarkup:
    """
    –û–¥–Ω–æ–∫–Ω–æ–ø–æ—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä—É—é —É–≤–∏–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç,
    –∫–æ–≥–¥–∞ –º–∞—Å—Ç–µ—Ä –ø–æ–º–µ—Ç–∏—Ç –∑–∞—è–≤–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π.
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{request_id}")]
        ]
    )


async def notify_others_later(delay: int, other_masters: list[int], request_id: int, bot):
    """
    –ö–æ—Ä—É—Ç–∏–Ω–∞ –∂–¥—ë—Ç `delay` —Å–µ–∫—É–Ω–¥, –∞ –ø–æ—Ç–æ–º —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –º–∞—Å—Ç–µ—Ä–∞–º –∏–∑ other_masters.
    –ï—Å–ª–∏ delay == 0, —Å—Ä–∞–∑—É –∏–¥—ë—Ç –∫ —Ä–∞—Å—Å—ã–ª–∫–µ.
    """
    if delay > 0:
        # –∑–∞—Å–Ω—É—Ç—å –Ω–∞ —Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥, –∫–æ—Ç–æ—Ä–æ–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ 5 –º–∏–Ω—É—Ç
        await asyncio.sleep(delay)

    # –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è (–∏–ª–∏ —Å—Ä–∞–∑—É, –µ—Å–ª–∏ delay=0) —Ä–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    for mid in other_masters:
        try:
            # –í–∞–∂–Ω–æ: –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö send_message –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å text=<—Å—Ç—Ä–æ–∫–∞>, –∞ –Ω–µ text: <—Å—Ç—Ä–æ–∫–∞>
            await bot.send_message(
                mid,
                text=f"–ó–∞—è–≤–∫–∞ ‚Ññ{request_id} —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –º–∞—Å—Ç–µ—Ä–æ–º."
            )
        except Exception as e:
            logging.exception(f"–ù–µ —Å–º–æ–≥ —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ {mid}: {e}")


async def resend_request_to_masters(request_id: int, bot, exclude: list[int] | None = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—É—é –∑–∞—è–≤–∫—É –≤—Å–µ–º –º–∞—Å—Ç–µ—Ä–∞–º –∑–∞–Ω–æ–≤–æ."""
    req = await get_request_by_id(request_id)
    if not req or req[10] != "open":
        return

    masters = await list_available_masters()
    if exclude:
        masters = [m for m in masters if m not in exclude]

    description = req[3]
    settlement = req[4]
    media_id = req[8]
    media_type = req[9]

    msg_txt = (
        f"üÜï –ó–∞—è–≤–∫–∞ ‚Ññ{request_id}!\n"
        f"üìç –†–∞–π–æ–Ω: {settlement}\n"
        f"üßæ –ü—Ä–æ–±–ª–µ–º–∞: {description}"
    )[:1024]

    buffer_bytes: bytes | None = None
    if media_id:
        try:
            file_info = await user_bot.get_file(media_id)
            file_obj = await user_bot.download_file(file_info.file_path)
            buffer_bytes = file_obj.getvalue() if isinstance(file_obj, BytesIO) else file_obj
        except Exception as e:
            logging.exception(f"–ù–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞ –ø–æ –∑–∞—è–≤–∫–µ {request_id}: {e}")

    uploaded_file_id: str | None = None
    for mid in masters:
        try:
            if buffer_bytes:
                if uploaded_file_id is None:
                    buf = BufferedInputFile(
                        buffer_bytes,
                        filename=f"attach.{'jpg' if media_type == 'photo' else 'mp4'}",
                    )
                    if media_type == "photo":
                        msg = await bot.send_photo(
                            mid,
                            photo=buf,
                            caption=msg_txt,
                            reply_markup=make_request_kb(request_id),
                            parse_mode="HTML",
                        )
                        uploaded_file_id = msg.photo[-1].file_id
                    else:
                        msg = await bot.send_video(
                            mid,
                            video=buf,
                            caption=msg_txt,
                            reply_markup=make_request_kb(request_id),
                            parse_mode="HTML",
                        )
                        uploaded_file_id = msg.video.file_id
                else:
                    if media_type == "photo":
                        await bot.send_photo(
                            mid,
                            photo=uploaded_file_id,
                            caption=msg_txt,
                            reply_markup=make_request_kb(request_id),
                            parse_mode="HTML",
                        )
                    else:
                        await bot.send_video(
                            mid,
                            video=uploaded_file_id,
                            caption=msg_txt,
                            reply_markup=make_request_kb(request_id),
                            parse_mode="HTML",
                        )
            else:
                await bot.send_message(
                    mid,
                    msg_txt,
                    reply_markup=make_request_kb(request_id),
                    parse_mode="HTML",
                )
        except Exception as e:
            logging.exception(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –º–∞—Å—Ç–µ—Ä—É {mid}: {e}")

# ‚Äî ¬´–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É¬ª
@router.callback_query(lambda c: c.data and c.data.startswith("take:"))
async def cb_take_request(query: CallbackQuery):
    request_id = int(query.data.split(":", 1)[1])
    master_id  = query.from_user.id

    # ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
    master = await get_master_by_id(master_id)
    # master[7] = is_active, master[5] = active_orders, master[6] = has_debt
    if not master or master[7] != 1:
        return await query.answer("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
    if master[5] >= 2:
        return await query.answer("‚õî –£ –≤–∞—Å —É–∂–µ 2 –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏.", show_alert=True)
    if master[6] == 1:
        return await query.answer("‚õî –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è. –û–ø–ª–∞—Ç–∏—Ç–µ –µ—ë.", show_alert=True)

    # ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É
    req = await get_request_by_id(request_id)
    # req[10] = status
    if not req or req[10] != "open":
        return await query.answer("‚õî –ó–∞—è–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)

    # ‚Äî –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º
    await take_request(request_id, master_id)

    # --- –¥–æ—Å—Ç–∞—ë–º —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä—É --------------------
    location_text = req[5]  # TEXT-–∞–¥—Ä–µ—Å (col 5)
    latitude = req[6]  # REAL (col 6)  | –º–æ–∂–µ—Ç –±—ã—Ç—å None
    longitude = req[7]  # REAL (col 7)  | –º–æ–∂–µ—Ç –±—ã—Ç—å None

    # 1) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.bot.send_message(
        master_id,
        (
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!\n"
            f"üìç –ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: {location_text}"
        ),
        parse_mode="HTML",
    )

    client_id = req[1]
    client_username = req[2]

    if not client_username or client_username == "":
        client_username = f"<a href='tg://user?id={client_id}'>–ü—Ä–æ—Ñ–∏–ª—å –≤ Telegram</a>"

    await query.bot.send_message(
        master_id,
        f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞: {client_username}"
        f"\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ",
        reply_markup=make_done_kb(request_id),
        parse_mode="HTML",
    )

    master_user_name = master[2]  # full_name –∏–∑ —Ç–∞–±–ª–∏—Ü—ã masters
    master_fullname = master[3]
    master_number = master[4]
    await user_bot.send_message(
        client_id,
        f"üîß –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{request_id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!\n"
        f"–ú–∞—Å—Ç–µ—Ä {master_fullname}(@<b>{master_user_name}</b>) —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ Telegram."
        f"\n–ò–ª–∏ –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞—Å—Ç–µ—Ä—É —Å–∞–º–∏: {master_number}",
        parse_mode="HTML",
    )

    # 2) –≥–µ–æ–ø–∏–Ω ‚Äì —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å
    if latitude is not None and longitude is not None:
        await query.bot.send_location(
            master_id,
            latitude=latitude,
            longitude=longitude,
        )

    from app.database.models import list_active_masters

    other_masters = await list_active_masters()
    admin_ids = await list_admins()

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π master_id ‚Äî –∞–¥–º–∏–Ω, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å—Å—ã–ª–∞–µ–º:
    if master_id in admin_ids:
        for aid in admin_ids:
            if aid != master_id:
                try:
                    # –í–∞–∂–Ω–æ: –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö send_message –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å text=<—Å—Ç—Ä–æ–∫–∞>, –∞ –Ω–µ text: <—Å—Ç—Ä–æ–∫–∞>
                    await query.bot.send_message(
                        aid,
                        text=f"–ó–∞—è–≤–∫–∞ ‚Ññ{request_id} —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º."
                    )
                except Exception as e:
                    logging.exception(f"–ù–µ —Å–º–æ–≥ —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ {aid}: {e}")

        # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã—Ö–æ–¥–∏–º
        try:
            await query.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É –∑–∞—è–≤–∫–∏ {request_id}: {e}")
        return


    other_masters = [
        mid for mid in other_masters
        if mid != master_id
    ]

    for mid in other_masters:
        try:
            # –í–∞–∂–Ω–æ: –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö send_message –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å text=<—Å—Ç—Ä–æ–∫–∞>, –∞ –Ω–µ text: <—Å—Ç—Ä–æ–∫–∞>
            await query.bot.send_message(
                mid,
                text=f"–ó–∞—è–≤–∫–∞ ‚Ññ{request_id} —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –º–∞—Å—Ç–µ—Ä–æ–º."
            )
        except Exception as e:
            logging.exception(f"–ù–µ —Å–º–æ–≥ —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ {mid}: {e}")

    # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ –º–∞—Å—Ç–µ—Ä–æ–≤
    try:
        await query.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å' {request_id=}: {e}")


# ‚Äî ¬´–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª
@router.callback_query(lambda c: c.data and c.data.startswith("decline:"))
async def cb_decline_request(query: CallbackQuery):
    request_id = int(query.data.split(":", 1)[1])
    master_id  = query.from_user.id

    master = await get_master_by_id(master_id)
    if not master or master[7] != 1:
        return await query.answer("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)

    req = await get_request_by_id(request_id)
    # req[7]=status, req[8]=master_id
    if not req or req[10] != "in_progress" or req[11] != master_id:
        return await query.answer("‚õî –ù–µ—á–µ–≥–æ –æ—Ç–∫–ª–æ–Ω—è—Ç—å.", show_alert=True)

    await decline_request(request_id, master_id)
    try:
        await query.message.edit_reply_markup()
    except Exception:
        pass

    client_id = req[1]
    await user_bot.send_message(
        client_id,
        f"‚ùå –ú–∞—Å—Ç–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É ‚Ññ{request_id}. –ú—ã –∏—â–µ–º –¥—Ä—É–≥–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.",
    )

    await resend_request_to_masters(request_id, query.bot, exclude=[master_id])
    await query.answer("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É ‚Äî –æ–Ω–∞ –≤–Ω–æ–≤—å –æ—Ç–∫—Ä—ã—Ç–∞.", show_alert=True)


# ‚Äî ¬´–í—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª
@router.callback_query(lambda c: c.data and c.data.startswith("done:"))
async def cb_done_request(query: CallbackQuery):
    request_id = int(query.data.split(":", 1)[1])
    master_id = query.from_user.id

    # ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–∫–∏–µ –∂–µ, –∫–∞–∫ —Ä–∞–Ω—å—à–µ ‚Äî
    master = await get_master_by_id(master_id)
    if not master or master[7] != 1:
        return await query.answer("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)

    req = await get_request_by_id(request_id)
    if not req or req[10] != "in_progress" or req[11] != master_id:
        return await query.answer("‚õî –≠—Ç–∞ –∑–∞—è–≤–∫–∞ –Ω–µ —É –≤–∞—Å –≤ —Ä–∞–±–æ—Ç–µ.", show_alert=True)

    # 1. —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
    await complete_request(request_id, master_id)

    # 2. —Å–æ–æ–±—â–∞–µ–º –ú–ê–°–¢–ï–†–£
    await query.message.answer(
        "üéâ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /pay_commission",
    )
    await query.message.edit_reply_markup()
    await query.answer("–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")

    # 3. –ø—Ä–æ—Å–∏–º –ö–õ–ò–ï–ù–¢–ê –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É
    client_id = req[1]
    await user_bot.send_message(
        client_id,
        f"üîî –ú–∞—Å—Ç–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{request_id}.",
        reply_markup=make_rating_kb(request_id),
        parse_mode="HTML",
    )


# ‚Äî ¬´–û–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é¬ª
@router.message(Command("pay_commission"))
async def cmd_pay_commission(message: Message):
    master_id = message.from_user.id

    master = await get_master_by_id(master_id)
    if not master or master[7] != 1:          # is_active
        return await message.answer("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
    if master[6] == 0:                        # has_debt
        return await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–∞ –ø–æ –∫–æ–º–∏—Å—Å–∏–∏.")

    await pay_commission(master_id)
    await message.answer("üí≥ –ö–æ–º–∏—Å—Å–∏—è –æ–ø–ª–∞—á–µ–Ω–∞, –≤—ã —Å–Ω–æ–≤–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∑–∞—è–≤–∫–∏.")


# –ö–Ω–æ–ø–∫–∞ ¬´–û–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é¬ª –≤ –º–µ–Ω—é
@router.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é")
async def btn_pay_commission(message: Message):
    await cmd_pay_commission(message)

@router.callback_query(F.data == "pay")
async def cb_pay_commission(query: CallbackQuery):
    master_id = query.from_user.id

    master = await get_master_by_id(master_id)
    if not master or master[7] != 1:            # is_active
        return await query.answer("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)

    if master[6] == 0:                          # has_debt
        return await query.answer("üü¢ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏.", show_alert=True)

    # –æ–±–Ω—É–ª—è–µ–º –¥–æ–ª–≥
    await pay_commission(master_id)

    # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await query.message.edit_reply_markup()
    except Exception:
        pass

    await query.message.answer("‚úÖ –ö–æ–º–∏—Å—Å–∏—è –æ–ø–ª–∞—á–µ–Ω–∞. –í—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–∞—è–≤–∫–∏.")
    await query.answer("–°–ø–∞—Å–∏–±–æ!")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /my_requests ‚îÄ‚îÄ‚îÄ
@router.message(Command("my_requests"))
async def cmd_my_requests(message: Message):
    master_id = message.from_user.id

    master = await get_master_by_id(master_id)
    if not master or master[7] != 1:
        return await message.answer("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")

    requests = await list_master_requests(master_id)

    lines = [f"#{r[0]} ‚Äî {r[1]}" for r in requests]
    if lines:
        text = "\n".join(lines)
        text = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏:\n" + text
    else:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫."

    if master[6] == 1:
        text += "\n\n‚ö†Ô∏è –ï—Å—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∫–æ–º–∏—Å—Å–∏–∏. /pay_commission"
    else:
        text += "\n\nüü¢ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ—Ç."

    await message.answer(text)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /finish_request ‚îÄ‚îÄ‚îÄ
@router.message(Command("finish_request"))
async def cmd_finish_request(message: Message, state: FSMContext):
    await state.set_state(CloseRequestFSM.request_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å:")


@router.message(StateFilter(CloseRequestFSM.request_id), F.text)
async def process_finish_request(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏.")

    request_id = int(message.text)
    master_id = message.from_user.id

    master = await get_master_by_id(master_id)
    if not master or master[7] != 1:
        await state.clear()
        return await message.answer("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")

    req = await get_request_by_id(request_id)
    if not req or req[10] != "in_progress" or req[11] != master_id:
        await state.clear()
        return await message.answer("‚õî –ó–∞—è–≤–∫–∞ –Ω–µ —É –≤–∞—Å –≤ —Ä–∞–±–æ—Ç–µ.")

    await complete_request(request_id, master_id)
    await state.clear()
    await message.answer(
        "–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /pay_commission."
    )

    client_id = req[1]
    await user_bot.send_message(
        client_id,
        f"üîî –ú–∞—Å—Ç–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{request_id}.",
        reply_markup=make_rating_kb(request_id),
        parse_mode="HTML",
    )


# –ö–Ω–æ–ø–∫–∞ ¬´–ú–æ–∏ –∑–∞—è–≤–∫–∏¬ª –≤ –º–µ–Ω—é
@router.message(F.text == "üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def btn_my_requests(message: Message):
    await cmd_my_requests(message)


# –ö–Ω–æ–ø–∫–∞ ¬´–ó–∞–∫—Ä—ã—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É¬ª –≤ –º–µ–Ω—é
@router.message(F.text == "‚úÖ –ó–∞–∫—Ä—ã—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É")
async def btn_finish_request_menu(message: Message, state: FSMContext):
    await cmd_finish_request(message, state)
