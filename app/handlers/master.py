from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
from app.database.models import (
    add_master,
    list_available_masters,
    take_request,
    decline_request,
    complete_request,
    pay_commission,
    get_master_by_id,
    get_request_by_id, wait_client_confirmation,
)
from app.bots import user_bot
router = Router()


class MasterRegistration(StatesGroup):
    full_name = State()
    phone = State()


# ‚Äî /start –∏ /help
@router.message(Command("start"))
async def master_start(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–∞—Å—Ç–µ—Ä–∞!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/register_master ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )


@router.message(Command("help"))
async def master_help(message: Message):
    await master_start(message)


# ‚Äî –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(Command("register_master"))
async def cmd_register_master(message: Message, state: FSMContext):
    await state.set_state(MasterRegistration.full_name)
    await message.answer("üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")


@router.message(StateFilter(MasterRegistration.full_name), F.text)
async def process_master_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text.strip())
    await state.set_state(MasterRegistration.phone)
    await message.answer("üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890:")


@router.message(StateFilter(MasterRegistration.phone), F.text)
async def process_master_phone(message: Message, state: FSMContext):
    data = await state.get_data()
    full_name = data["full_name"]
    phone = message.text.strip()
    user = message.from_user
    username = user.username or ""

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await add_master(user.id, username, full_name, phone)

    await message.answer(
        "‚úÖ –ú–∞—Å—Ç–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üë§ –ò–º—è: {full_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏."
    )
    await state.clear()


# inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
def make_request_kb(request_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîß –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take:{request_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",     callback_data=f"decline:{request_id}")
    ]])

def make_done_kb(request_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"done:{request_id}"
                )
            ]
        ]
    )
def make_client_confirm_kb(request_id: int) -> InlineKeyboardMarkup:
    """
    –û–¥–Ω–æ–∫–Ω–æ–ø–æ—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä—É—é —É–≤–∏–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç,
    –∫–æ–≥–¥–∞ –º–∞—Å—Ç–µ—Ä –ø–æ–º–µ—Ç–∏—Ç –∑–∞—è–≤–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π.
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{request_id}")]
        ]
    )


# ‚Äî ¬´–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É¬ª
@router.callback_query(lambda c: c.data and c.data.startswith("take:"))
async def cb_take_request(query: CallbackQuery):
    request_id = int(query.data.split(":", 1)[1])
    master_id  = query.from_user.id

    # ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
    master = await get_master_by_id(master_id)
    # master[7] = is_active, master[5] = active_orders, master[6] = has_debt
    if not master or master[7] != 1:
        return await query.answer("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
    if master[5] >= 2:
        return await query.answer("‚õî –£ –≤–∞—Å —É–∂–µ 2 –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏.", show_alert=True)
    if master[6] == 1:
        return await query.answer("‚õî –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è. –û–ø–ª–∞—Ç–∏—Ç–µ –µ—ë.", show_alert=True)

    # ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É
    req = await get_request_by_id(request_id)
    # req[10] = status
    if not req or req[10] != "open":
        return await query.answer("‚õî –ó–∞—è–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)

    # ‚Äî –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º
    await take_request(request_id, master_id)

    # --- –¥–æ—Å—Ç–∞—ë–º —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä—É --------------------
    location_text = req[5]  # TEXT-–∞–¥—Ä–µ—Å (col 5)
    latitude = req[6]  # REAL (col 6)  | –º–æ–∂–µ—Ç –±—ã—Ç—å None
    longitude = req[7]  # REAL (col 7)  | –º–æ–∂–µ—Ç –±—ã—Ç—å None

    # 1) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.bot.send_message(
        master_id,
        (
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!\n"
            f"üìç –ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: {location_text}"
        ),
        parse_mode="HTML",
    )

    client_id = req[1]
    client_username = req[2]

    if not client_username or client_username == "":
        client_username = f"<a href='tg://user?id={client_id}'>–ü—Ä–æ—Ñ–∏–ª—å –≤ Telegram</a>"

    await query.bot.send_message(
        master_id,
        f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞: {client_username}"
        f"\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ",
        reply_markup=make_done_kb(request_id),
        parse_mode="HTML",
    )

    # 2) –≥–µ–æ–ø–∏–Ω ‚Äì —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å
    if latitude is not None and longitude is not None:
        await query.bot.send_location(
            master_id,
            latitude=latitude,
            longitude=longitude,
        )

    # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ –º–∞—Å—Ç–µ—Ä–æ–≤
    try:
        await query.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å' {request_id=}: {e}")


# ‚Äî ¬´–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª
@router.callback_query(lambda c: c.data and c.data.startswith("decline:"))
async def cb_decline_request(query: CallbackQuery):
    request_id = int(query.data.split(":", 1)[1])
    master_id  = query.from_user.id

    master = await get_master_by_id(master_id)
    if not master or master[7] != 1:
        return await query.answer("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)

    req = await get_request_by_id(request_id)
    # req[7]=status, req[8]=master_id
    if not req or req[10] != "in_progress" or req[11] != master_id:
        return await query.answer("‚õî –ù–µ—á–µ–≥–æ –æ—Ç–∫–ª–æ–Ω—è—Ç—å.", show_alert=True)

    await decline_request(request_id, master_id)
    await query.answer("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É ‚Äî –æ–Ω–∞ –≤–Ω–æ–≤—å –æ—Ç–∫—Ä—ã—Ç–∞.", show_alert=True)


# ‚Äî ¬´–í—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª
@router.callback_query(lambda c: c.data and c.data.startswith("done:"))
async def cb_done_request(query: CallbackQuery):
    request_id = int(query.data.split(":", 1)[1])
    master_id = query.from_user.id

    # ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–∫–∏–µ –∂–µ, –∫–∞–∫ —Ä–∞–Ω—å—à–µ ‚Äî
    master = await get_master_by_id(master_id)
    if not master or master[7] != 1:
        return await query.answer("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)

    req = await get_request_by_id(request_id)
    if not req or req[10] != "in_progress" or req[11] != master_id:
        return await query.answer("‚õî –≠—Ç–∞ –∑–∞—è–≤–∫–∞ –Ω–µ —É –≤–∞—Å –≤ —Ä–∞–±–æ—Ç–µ.", show_alert=True)

    # 1. –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ await_client
    await wait_client_confirmation(request_id, master_id)

    # 2. —Å–æ–æ–±—â–∞–µ–º –ú–ê–°–¢–ï–†–£
    await query.message.answer("‚åõ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.")
    await query.message.edit_reply_markup()          # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
    await query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É")

    # 3. —Å–æ–æ–±—â–∞–µ–º –ö–õ–ò–ï–ù–¢–£
    client_id = req[1]
    await user_bot.send_message(
        client_id,
        f"üîî –ú–∞—Å—Ç–µ—Ä –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{request_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ:",
        reply_markup=make_client_confirm_kb(request_id),
        parse_mode="HTML",
    )


# ‚Äî ¬´–û–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é¬ª
@router.message(Command("pay_commission"))
async def cmd_pay_commission(message: Message):
    master_id = message.from_user.id

    master = await get_master_by_id(master_id)
    if not master or master[7] != 1:          # is_active
        return await message.answer("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
    if master[6] == 0:                        # has_debt
        return await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–∞ –ø–æ –∫–æ–º–∏—Å—Å–∏–∏.")

    await pay_commission(master_id)
    await message.answer("üí≥ –ö–æ–º–∏—Å—Å–∏—è –æ–ø–ª–∞—á–µ–Ω–∞, –≤—ã —Å–Ω–æ–≤–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∑–∞—è–≤–∫–∏.")
