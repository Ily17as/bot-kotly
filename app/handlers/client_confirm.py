# app/handlers/client_confirm.py
from aiogram import Router
from aiogram.types import CallbackQuery
from app.database.models import get_request_by_id, complete_request
from app.bots import master_bot
import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()


def make_pay_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é", callback_data="pay")]
        ]
    )

def make_rating_kb(request_id: int) -> InlineKeyboardMarkup:
    # 5,4,3,2,1 ‚Üí —á—Ç–æ–±—ã –∫—Ä–∞—Å–∏–≤–æ–π –¥—É–≥–æ–π
    buttons = [
        InlineKeyboardButton(text=f"{i}/5", callback_data=f"rate:{request_id}:{i}")
        for i in (5,4,3,2,1)
    ]
    return InlineKeyboardMarkup(inline_keyboard=[buttons])

@router.callback_query(lambda c: c.data and c.data.startswith("confirm:"))
async def cb_client_confirm(query: CallbackQuery):
    request_id = int(query.data.split(":", 1)[1])
    user_id = query.from_user.id

    req = await get_request_by_id(request_id)
    if not req or req[1] != user_id or req[10] != "await_client":
        return await query.answer("‚õî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–µ–ª—å–∑—è.", show_alert=True)

    master_id = req[11]
    await complete_request(request_id, master_id)

    await query.message.edit_reply_markup()
    await query.message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
    await query.message.answer(
        "üôå –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å.\n"
        "–ù–∞—Å–∫–æ–ª—å–∫–æ –¥–æ–≤–æ–ª—å–Ω—ã —Ä–∞–±–æ—Ç–æ–π –º–∞—Å—Ç–µ—Ä–∞?",
        reply_markup=make_rating_kb(request_id),
    )
    await query.answer()

    try:
        await master_bot.send_message(
            master_id,
            f"üéâ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ ‚Ññ{request_id}. "
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é 100 ‚ÇΩ –∫–æ–º–∞–Ω–¥–æ–π /pay_commission",
            parse_mode="HTML",
            reply_markup=make_pay_kb(),
        )
    except Exception as e:
        logging.exception(f"–ù–µ —Å–º–æ–≥ —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {e}")
