import asyncio

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.database.database import get_db
from app.database.models import get_user_requests, list_available_masters
from app.handlers.master import make_request_kb

from aiogram.types import BufferedInputFile
from io import BytesIO
import logging
from app.database.models import list_admins
from app.bots import master_bot
from app.database.models import get_request_by_id

router = Router()


# ---------------- FSM ----------------
class RequestForm(StatesGroup):
    description = State()
    media = State()
    district = State()
    location = State()


# ---------------- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ ----------------
@router.message(F.text == "üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def start_request(message: Message, state: FSMContext):
    await state.set_state(RequestForm.description)
    await message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:\n\n"
        "- –ß—Ç–æ –∑–∞ –∫–æ—Ç—ë–ª? (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å)\n"
        "- –ö–∞–∫ –¥–∞–≤–Ω–æ –Ω–∞—á–∞–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞?\n"
        "- –ö–∞–∫–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –∫–æ–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è?\n"
        "- –ï—Å—Ç—å –ª–∏ —É—Ç–µ—á–∫–∞ –≤–æ–¥—ã –∏–ª–∏ –≥–∞–∑–∞?\n"
        "- –ù–∞–±–ª—é–¥–∞—é—Ç—Å—è –ª–∏ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —à—É–º—ã –∏–ª–∏ –∑–∞–ø–∞—Ö?\n\n"
        "–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –º–∞—Å—Ç–µ—Ä —Å–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–º–æ—á—å!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üëá",
        parse_mode="HTML",
    )


@router.message(RequestForm.description, F.text)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(RequestForm.media)
    await message.answer("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –ø—Ä–æ–±–ª–µ–º—ã (–æ–¥–∏–Ω —Ñ–∞–π–ª)")


@router.message(RequestForm.media, F.photo | F.video)
async def process_media(message: Message, state: FSMContext):
    media_id = message.photo[-1].file_id if message.photo else message.video.file_id
    media_type = "photo" if message.photo else "video"
    await state.update_data(media_id=media_id, media_type=media_type)
    await state.set_state(RequestForm.district)
    await message.answer("üèô –£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞–π–æ–Ω (—Ç–µ–∫—Å—Ç–æ–º). "
                         "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–°–æ–≤–µ—Ç—Å–∫–∏–π¬ª, ¬´–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π¬ª –∏–ª–∏ ¬´–¶–µ–Ω—Ç—Ä¬ª")


@router.message(RequestForm.district, F.text)
async def process_district(message: Message, state: FSMContext):
    await state.update_data(settlement=message.text.strip())   # —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏
    await state.set_state(RequestForm.location)
    await message.answer("üìç –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é *–∏–ª–∏* "
                         "–Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π",
                         parse_mode="Markdown")

async def delayed_to_masters():
    await asyncio.sleep(300)

@router.message(RequestForm.location, F.location | F.text)
async def process_location(message: Message, state: FSMContext):
    # ---------- –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM ----------
    data = await state.get_data()
    settlement = data["settlement"]
    description = data["description"]
    media_id = data["media_id"]
    media_type = data["media_type"]

    # ---------- –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ----------
    user_id = message.from_user.id
    username = (
        f"@{message.from_user.username}"
        if message.from_user.username
        else f"<a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>"
    )

    # ---------- –ª–æ–∫–∞—Ü–∏—è / –∞–¥—Ä–µ—Å ----------
    latitude = message.location.latitude if message.location else None
    longitude = message.location.longitude if message.location else None
    location_text = (
        f"{latitude:.6f}, {longitude:.6f}"
        if message.location
        else message.text.strip()
    )

    # ---------- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î ----------
    db = await get_db()
    cursor = await db.execute(
        """
        INSERT INTO requests
              (user_id, username, description,
               settlement, location,
               latitude, longitude,
               media_id, media_type,
               status, commission_paid)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 'open', 0)
        """,
        (
            user_id,
            username,
            description,
            settlement,
            location_text,
            latitude,
            longitude,
            media_id,
            media_type,
        ),
    )
    new_req_id = cursor.lastrowid
    await db.commit()
    await db.close()

    # –°–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # —Å—Ä–∞–∑—É –º–æ–≥ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞—è–≤–æ–∫.
    await state.clear()

    # ---------- –≥–æ—Ç–æ–≤–∏–º —Ä–∞—Å—Å—ã–ª–∫—É ----------
    from app.bot import master_bot

    masters = await list_available_masters()
    msg_txt = (
                  f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{new_req_id}!\n"
                  f"üìç –†–∞–π–æ–Ω: {settlement}\n"
                  f"üßæ –ü—Ä–æ–±–ª–µ–º–∞: {description}"
              )[:1024]
    admin_txt = (
                  f"(ADMIN)üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{new_req_id}!\n"
                  f"üìç –†–∞–π–æ–Ω: {settlement}\n"
                  f"üßæ –ü—Ä–æ–±–ª–µ–º–∞: {description}"
              )[:1024]

    # ---------- –∫–∞—á–∞–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ ----------
    buffer_bytes: bytes | None = None
    if media_id:
        file_info = await message.bot.get_file(media_id)
        file_obj = await message.bot.download_file(file_info.file_path)
        buffer_bytes = (
            file_obj.getvalue() if isinstance(file_obj, BytesIO) else file_obj
        )

    uploaded_file_id: str | None = None  # –∑–∞–ø–æ–º–Ω–∏–º file_id –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∞–ø–ª–æ—É–¥–∞
    logging.info(f"Masters to notify: {masters}")

    admin_ids = await list_admins()
    # 1) —Å—Ä–∞–∑—É —Ä–∞—Å—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω–∞–º
    for aid in admin_ids:
        try:
            # 1Ô∏è‚É£  –°–ù–ê–ß–ê–õ–ê –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if buffer_bytes:
                if uploaded_file_id is None:
                    # ‚îÄ –ø–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚Äì —Ä–µ–∞–ª—å–Ω—ã–π –∞–ø–ª–æ—É–¥
                    buf = BufferedInputFile(
                        buffer_bytes,
                        filename=f"attach.{'jpg' if media_type == 'photo' else 'mp4'}",
                    )
                    if media_type == "photo":
                        msg = await master_bot.send_photo(
                            aid,
                            photo=buf,
                            caption=admin_txt,
                            reply_markup=make_request_kb(new_req_id),
                            parse_mode="HTML",
                        )
                        uploaded_file_id = msg.photo[-1].file_id
                    else:
                        msg = await master_bot.send_video(
                            aid,
                            video=buf,
                            caption=admin_txt,
                            reply_markup=make_request_kb(new_req_id),
                            parse_mode="HTML",
                        )
                        uploaded_file_id = msg.video.file_id
                else:
                    # ‚îÄ –æ—Å—Ç–∞–ª—å–Ω—ã–º –º–∞—Å—Ç–µ—Ä–∞–º ‚Äì –ø–æ file_id
                    if media_type == "photo":
                        await master_bot.send_photo(
                            aid,
                            photo=uploaded_file_id,
                            caption=admin_txt,
                            reply_markup=make_request_kb(new_req_id),
                            parse_mode="HTML",
                        )
                    else:
                        await master_bot.send_video(
                            aid,
                            video=uploaded_file_id,
                            caption=admin_txt,
                            reply_markup=make_request_kb(new_req_id),
                            parse_mode="HTML",
                        )
            else:
                # –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ—Ç ‚Äì —Å—Ä–∞–∑—É —Ç–µ–∫—Å—Ç
                await master_bot.send_message(
                    aid,
                    admin_txt,
                    reply_markup=make_request_kb(new_req_id),
                    parse_mode="HTML",
                )

            logging.info(f"Masters to notify: {masters}")

        except Exception as e:
            logging.exception(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –º–∞—Å—Ç–µ—Ä—É {aid}: {e}")


    finish_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton(text="üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")],
        ],
        resize_keyboard=True,
    )

    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–∞–º!\n\n"
        "üîé <b>–ß—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ:</b>\n"
        "- –ü–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –º–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Telegram.\n"
        "- üí¨ –í—ã —Å–∞–º–∏ –æ–±—Å—É–∂–¥–∞–µ—Ç–µ –¥–µ—Ç–∞–ª–∏, —Å—Ä–æ–∫–∏ –∏ –æ–ø–ª–∞—Ç—É —Å –º–∞—Å—Ç–µ—Ä–æ–º.\n"
        "- –°–µ—Ä–≤–∏—Å <b>–ö–æ—Ç—ë–ª–û–ö</b> ‚Äî –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –∑–∞—è–≤–æ–∫ –∏ <b>–Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏</b> –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç.\n\n"
        "‚è≥ –ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–º–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üî•",
        reply_markup=finish_keyboard,
        parse_mode="HTML",
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, –∏–Ω–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # –Ω–µ —Å–º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è.
    await state.clear()

    await asyncio.sleep(60)

    other_masters = [
        mid for mid in masters
        if mid not in admin_ids
    ]

    req = await get_request_by_id(new_req_id)
    if not req or req[10] != "open":
        pass
    else:
        for mid in other_masters:
            try:
                # 1Ô∏è‚É£  –°–ù–ê–ß–ê–õ–ê –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if buffer_bytes:
                    if uploaded_file_id is None:
                        # ‚îÄ –ø–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚Äì —Ä–µ–∞–ª—å–Ω—ã–π –∞–ø–ª–æ—É–¥
                        buf = BufferedInputFile(
                            buffer_bytes,
                            filename=f"attach.{'jpg' if media_type == 'photo' else 'mp4'}",
                        )
                        if media_type == "photo":
                            msg = await master_bot.send_photo(
                                mid,
                                photo=buf,
                                caption=msg_txt,
                                reply_markup=make_request_kb(new_req_id),
                                parse_mode="HTML",
                            )
                            uploaded_file_id = msg.photo[-1].file_id
                        else:
                            msg = await master_bot.send_video(
                                mid,
                                video=buf,
                                caption=msg_txt,
                                reply_markup=make_request_kb(new_req_id),
                                parse_mode="HTML",
                            )
                            uploaded_file_id = msg.video.file_id
                    else:
                        # ‚îÄ –æ—Å—Ç–∞–ª—å–Ω—ã–º –º–∞—Å—Ç–µ—Ä–∞–º ‚Äì –ø–æ file_id
                        if media_type == "photo":
                            await master_bot.send_photo(
                                mid,
                                photo=uploaded_file_id,
                                caption=msg_txt,
                                reply_markup=make_request_kb(new_req_id),
                                parse_mode="HTML",
                            )
                        else:
                            await master_bot.send_video(
                                mid,
                                video=uploaded_file_id,
                                caption=msg_txt,
                                reply_markup=make_request_kb(new_req_id),
                                parse_mode="HTML",
                            )
                else:
                    # –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ—Ç ‚Äì —Å—Ä–∞–∑—É —Ç–µ–∫—Å—Ç
                    await master_bot.send_message(
                        mid,
                        msg_txt,
                        reply_markup=make_request_kb(new_req_id),
                        parse_mode="HTML",
                    )

                logging.info(f"Masters to notify: {masters}")

            except Exception as e:
                logging.exception(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –º–∞—Å—Ç–µ—Ä—É {mid}: {e}")

# ---------------- –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã ----------------
@router.message(RequestForm.description)
async def invalid_description(message: Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã!")


@router.message(RequestForm.media)
async def invalid_media(message: Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!")


@router.message(RequestForm.district)
async def invalid_district(message: Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º!")


@router.message(RequestForm.location)
async def invalid_location(message: Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å!")


# ---------------- –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫ ----------------
@router.message(F.text == "üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def list_requests(message: Message):
    requests = await get_user_requests(message.from_user.id)
    if not requests:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ üôÉ")
        return

    msg = ["üóÇ –í–∞—à–∏ –∑–∞—è–≤–∫–∏:"]
    for req in requests:
        entry = f"\nüë§ {req[2]}\nüìç <b>{req[4]}</b>\nüìù {req[3]}\n"
        msg.append(entry)
    await message.answer("\n".join(msg), parse_mode="HTML")
