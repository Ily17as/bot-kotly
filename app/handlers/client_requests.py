from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.database.models import save_request, get_user_requests
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

router = Router()

class RequestForm(StatesGroup):
    description = State()
    media = State()
    location = State()

# --------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ ---------------

@router.message(F.text == "üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def start_request(message: Message, state: FSMContext):
    await state.set_state(RequestForm.description)
    await message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:\n\n"
                            "- –ß—Ç–æ –∑–∞ –∫–æ—Ç—ë–ª? (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å)\n"
                            "- –ö–∞–∫ –¥–∞–≤–Ω–æ –Ω–∞—á–∞–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞?\n"
                            "- –ö–∞–∫–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –∫–æ–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è?\n"
                            "- –ï—Å—Ç—å –ª–∏ —É—Ç–µ—á–∫–∞ –≤–æ–¥—ã –∏–ª–∏ –≥–∞–∑–∞?\n"
                            "- –ù–∞–±–ª—é–¥–∞—é—Ç—Å—è –ª–∏ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —à—É–º—ã –∏–ª–∏ –∑–∞–ø–∞—Ö?\n\n"
                            "–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –º–∞—Å—Ç–µ—Ä —Å–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–º–æ—á—å!\n\n"
                            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üëá",
                            parse_mode="HTML"
                         )

@router.message(RequestForm.description, F.text)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(RequestForm.media)
    await message.answer("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–æ–¥–∏–Ω —Ñ–∞–π–ª)")

@router.message(RequestForm.media, F.photo | F.video)
async def process_media(message: Message, state: FSMContext):
    media_id = message.photo[-1].file_id if message.photo else message.video.file_id
    media_type = 'photo' if message.photo else 'video'

    await state.update_data(media_id=media_id, media_type=media_type)
    await state.set_state(RequestForm.location)
    await message.answer("üìç –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º")

@router.message(RequestForm.location, F.location | F.text)
async def process_location(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    if message.from_user.username:
        username = f"@{message.from_user.username}"
    else:
        user_id = message.from_user.id
        username = f"<a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>"
    print(username)
    description = data['description']
    media_id = data['media_id']
    media_type = data['media_type']
    finish_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton(text="üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")]
        ],
        resize_keyboard=True
    )

    if message.location:
        location_text = f"{message.location.latitude}, {message.location.longitude}"
    else:
        location_text = message.text

    await save_request(user_id, username, description, location_text, media_id, media_type)
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–∞–º!\n\n"
                            "üîé <b>–ß—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ:</b>\n"
                            "- –ü–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –º–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Telegram.\n"
                            "- üí¨ –í—ã —Å–∞–º–∏ –æ–±—Å—É–∂–¥–∞–µ—Ç–µ –¥–µ—Ç–∞–ª–∏, —Å—Ä–æ–∫–∏ –∏ –æ–ø–ª–∞—Ç—É —Å –º–∞—Å—Ç–µ—Ä–æ–º.\n"
                            "- –°–µ—Ä–≤–∏—Å <b>–ö–æ—Ç—ë–ª–û–ö</b> ‚Äî —ç—Ç–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –∑–∞—è–≤–æ–∫ –∏ <b>–Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏</b> –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç.\n\n"
                            "‚è≥ –ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–º–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞, –∞ –¥–µ–Ω—å–≥–∏ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ –≤–∞—à —Å—á—ë—Ç.\n\n"
                            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üî•",
                            reply_markup=finish_keyboard,
                            parse_mode="HTML"
                         )
    await state.clear()

# --------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –≤–≤–æ–¥–∞ ---------------

@router.message(RequestForm.description)
async def invalid_description(message: Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã!")

@router.message(RequestForm.media)
async def invalid_media(message: Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!")

@router.message(RequestForm.location)
async def invalid_location(message: Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å!")

# --------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ ---------------

@router.message(F.text == "üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def list_requests(message: Message):
    requests = await get_user_requests(message.from_user.id)
    if not requests:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ üôÉ")
        return

    msg = ["üóÇ –í–∞—à–∏ –∑–∞—è–≤–∫–∏:"]
    for req in requests:
        entry = f"\nüë§ {req[2]}\nüìç <b>{req[4]}</b>\nüìù {req[3]}\n"
        msg.append(entry)
    await message.answer("\n".join(msg), parse_mode="HTML")