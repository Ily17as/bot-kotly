# handlers/client_requests.py
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.database.models import save_request, get_user_requests

router = Router()

class RequestForm(StatesGroup):
    description = State()
    location = State()
    media = State()

@router.message(F.text == "üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def start_request(message: Message, state: FSMContext):
    await state.set_state(RequestForm.description)
    await message.answer("üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (—á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?)")

@router.message(RequestForm.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(RequestForm.location)
    await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–ª–æ–∫–∞—Ü–∏–µ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º –∞–¥—Ä–µ—Å–∞)")

@router.message(RequestForm.location)
async def process_location(message: Message, state: FSMContext):
    if message.location:
        # –ï—Å–ª–∏ –≥–µ–æ–º–µ—Ç–∫–∞
        location_text = f"{message.location.latitude}, {message.location.longitude}"
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–¥—Ä–µ—Å)
        location_text = message.text or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    await state.update_data(location=location_text)
    await state.set_state(RequestForm.media)
    await message.answer("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–æ–¥–∏–Ω —Ñ–∞–π–ª)")

@router.message(RequestForm.media, F.photo | F.video)
async def process_media(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    description = data['description']
    location = data['location']
    media_id = message.photo[-1].file_id if message.photo else message.video.file_id
    media_type = 'photo' if message.photo else 'video'

    await save_request(user_id, description, location, media_id, media_type)
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    await state.clear()

@router.message(F.text == "üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def list_requests(message: Message):
    requests = await get_user_requests(message.from_user.id)
    if not requests:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ üôÉ")
        return

    msg = ["üóÇ –í–∞—à–∏ –∑–∞—è–≤–∫–∏:"]
    for req in requests:
        entry = f"\nüìç <b>{req[3]}</b>\nüìù {req[2]}\n"
        msg.append(entry)
    await message.answer("\n".join(msg), parse_mode="HTML")
